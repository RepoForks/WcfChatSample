//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WcfChatSample.Client.Wpf.ServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UserCredentials", Namespace="http://schemas.datacontract.org/2004/07/WcfChatSample.Service")]
    [System.SerializableAttribute()]
    public partial class UserCredentials : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private WcfChatSample.Client.Wpf.ServiceReference.UserRole RoleField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public WcfChatSample.Client.Wpf.ServiceReference.UserRole Role {
            get {
                return this.RoleField;
            }
            set {
                if ((this.RoleField.Equals(value) != true)) {
                    this.RoleField = value;
                    this.RaisePropertyChanged("Role");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UserRole", Namespace="http://schemas.datacontract.org/2004/07/WcfChatSample.Service")]
    public enum UserRole : byte {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        None = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        User = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Admin = 2,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ServerInternalFault", Namespace="http://schemas.datacontract.org/2004/07/WcfChatSample.Service")]
    [System.SerializableAttribute()]
    public partial class ServerInternalFault : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UserLoginFault", Namespace="http://schemas.datacontract.org/2004/07/WcfChatSample.Service")]
    [System.SerializableAttribute()]
    public partial class UserLoginFault : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UserLoginRequiredFault", Namespace="http://schemas.datacontract.org/2004/07/WcfChatSample.Service")]
    [System.SerializableAttribute()]
    public partial class UserLoginRequiredFault : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UserSessionTimeoutFault", Namespace="http://schemas.datacontract.org/2004/07/WcfChatSample.Service")]
    [System.SerializableAttribute()]
    public partial class UserSessionTimeoutFault : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ChatMessage", Namespace="http://schemas.datacontract.org/2004/07/WcfChatSample.Service")]
    [System.SerializableAttribute()]
    public partial class ChatMessage : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TextField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UsernameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Date {
            get {
                return this.DateField;
            }
            set {
                if ((this.DateField.Equals(value) != true)) {
                    this.DateField = value;
                    this.RaisePropertyChanged("Date");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Text {
            get {
                return this.TextField;
            }
            set {
                if ((object.ReferenceEquals(this.TextField, value) != true)) {
                    this.TextField = value;
                    this.RaisePropertyChanged("Text");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Username {
            get {
                return this.UsernameField;
            }
            set {
                if ((object.ReferenceEquals(this.UsernameField, value) != true)) {
                    this.UsernameField = value;
                    this.RaisePropertyChanged("Username");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference.IChatService", CallbackContract=typeof(WcfChatSample.Client.Wpf.ServiceReference.IChatServiceCallback), SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface IChatService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/Login", ReplyAction="http://tempuri.org/IChatService/LoginResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(WcfChatSample.Client.Wpf.ServiceReference.ServerInternalFault), Action="http://tempuri.org/IChatService/LoginServerInternalFaultFault", Name="ServerInternalFault", Namespace="http://schemas.datacontract.org/2004/07/WcfChatSample.Service")]
        [System.ServiceModel.FaultContractAttribute(typeof(WcfChatSample.Client.Wpf.ServiceReference.UserLoginFault), Action="http://tempuri.org/IChatService/LoginUserLoginFaultFault", Name="UserLoginFault", Namespace="http://schemas.datacontract.org/2004/07/WcfChatSample.Service")]
        WcfChatSample.Client.Wpf.ServiceReference.UserCredentials Login(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/Login", ReplyAction="http://tempuri.org/IChatService/LoginResponse")]
        System.Threading.Tasks.Task<WcfChatSample.Client.Wpf.ServiceReference.UserCredentials> LoginAsync(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/Post", ReplyAction="http://tempuri.org/IChatService/PostResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(WcfChatSample.Client.Wpf.ServiceReference.UserLoginRequiredFault), Action="http://tempuri.org/IChatService/PostUserLoginRequiredFaultFault", Name="UserLoginRequiredFault", Namespace="http://schemas.datacontract.org/2004/07/WcfChatSample.Service")]
        [System.ServiceModel.FaultContractAttribute(typeof(WcfChatSample.Client.Wpf.ServiceReference.ServerInternalFault), Action="http://tempuri.org/IChatService/PostServerInternalFaultFault", Name="ServerInternalFault", Namespace="http://schemas.datacontract.org/2004/07/WcfChatSample.Service")]
        [System.ServiceModel.FaultContractAttribute(typeof(WcfChatSample.Client.Wpf.ServiceReference.UserSessionTimeoutFault), Action="http://tempuri.org/IChatService/PostUserSessionTimeoutFaultFault", Name="UserSessionTimeoutFault", Namespace="http://schemas.datacontract.org/2004/07/WcfChatSample.Service")]
        void Post(string message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/Post", ReplyAction="http://tempuri.org/IChatService/PostResponse")]
        System.Threading.Tasks.Task PostAsync(string message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/DisconnectUser", ReplyAction="http://tempuri.org/IChatService/DisconnectUserResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(WcfChatSample.Client.Wpf.ServiceReference.UserLoginRequiredFault), Action="http://tempuri.org/IChatService/DisconnectUserUserLoginRequiredFaultFault", Name="UserLoginRequiredFault", Namespace="http://schemas.datacontract.org/2004/07/WcfChatSample.Service")]
        [System.ServiceModel.FaultContractAttribute(typeof(WcfChatSample.Client.Wpf.ServiceReference.UserSessionTimeoutFault), Action="http://tempuri.org/IChatService/DisconnectUserUserSessionTimeoutFaultFault", Name="UserSessionTimeoutFault", Namespace="http://schemas.datacontract.org/2004/07/WcfChatSample.Service")]
        void DisconnectUser(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/DisconnectUser", ReplyAction="http://tempuri.org/IChatService/DisconnectUserResponse")]
        System.Threading.Tasks.Task DisconnectUserAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/Refresh", ReplyAction="http://tempuri.org/IChatService/RefreshResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(WcfChatSample.Client.Wpf.ServiceReference.UserSessionTimeoutFault), Action="http://tempuri.org/IChatService/RefreshUserSessionTimeoutFaultFault", Name="UserSessionTimeoutFault", Namespace="http://schemas.datacontract.org/2004/07/WcfChatSample.Service")]
        [System.ServiceModel.FaultContractAttribute(typeof(WcfChatSample.Client.Wpf.ServiceReference.ServerInternalFault), Action="http://tempuri.org/IChatService/RefreshServerInternalFaultFault", Name="ServerInternalFault", Namespace="http://schemas.datacontract.org/2004/07/WcfChatSample.Service")]
        [System.ServiceModel.FaultContractAttribute(typeof(WcfChatSample.Client.Wpf.ServiceReference.UserLoginRequiredFault), Action="http://tempuri.org/IChatService/RefreshUserLoginRequiredFaultFault", Name="UserLoginRequiredFault", Namespace="http://schemas.datacontract.org/2004/07/WcfChatSample.Service")]
        WcfChatSample.Client.Wpf.ServiceReference.ChatMessage[] Refresh();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/Refresh", ReplyAction="http://tempuri.org/IChatService/RefreshResponse")]
        System.Threading.Tasks.Task<WcfChatSample.Client.Wpf.ServiceReference.ChatMessage[]> RefreshAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IChatServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatService/OnMessagePost")]
        void OnMessagePost(WcfChatSample.Client.Wpf.ServiceReference.ChatMessage[] message);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatService/OnUsersListChange")]
        void OnUsersListChange(string[] users);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IChatServiceChannel : WcfChatSample.Client.Wpf.ServiceReference.IChatService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ChatServiceClient : System.ServiceModel.DuplexClientBase<WcfChatSample.Client.Wpf.ServiceReference.IChatService>, WcfChatSample.Client.Wpf.ServiceReference.IChatService {
        
        public ChatServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public ChatServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public ChatServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ChatServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ChatServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public WcfChatSample.Client.Wpf.ServiceReference.UserCredentials Login(string username, string password) {
            return base.Channel.Login(username, password);
        }
        
        public System.Threading.Tasks.Task<WcfChatSample.Client.Wpf.ServiceReference.UserCredentials> LoginAsync(string username, string password) {
            return base.Channel.LoginAsync(username, password);
        }
        
        public void Post(string message) {
            base.Channel.Post(message);
        }
        
        public System.Threading.Tasks.Task PostAsync(string message) {
            return base.Channel.PostAsync(message);
        }
        
        public void DisconnectUser(string username) {
            base.Channel.DisconnectUser(username);
        }
        
        public System.Threading.Tasks.Task DisconnectUserAsync(string username) {
            return base.Channel.DisconnectUserAsync(username);
        }
        
        public WcfChatSample.Client.Wpf.ServiceReference.ChatMessage[] Refresh() {
            return base.Channel.Refresh();
        }
        
        public System.Threading.Tasks.Task<WcfChatSample.Client.Wpf.ServiceReference.ChatMessage[]> RefreshAsync() {
            return base.Channel.RefreshAsync();
        }
    }
}
